## Lundi 2021-10-18

### Présentation des étudiants

Tour de table et d'où ils viennent.

### Présentation de la formation

On a parlé du REAC : qu'allons nous voir en formation ? Qu'est-ce que c'est, une application Web/Web mobile ?

* une application exécutée par un navigateur
* une séparation entre la partie "front" (navigateur) aussi appelée "client"
* et la partie "backend" (données et traitements, sur des machines distantes) aussi appelée "serveur".

### Langages, techno et méthodes

Pour certains il était important de savoir ce qu'ils sauront faire, pour pouvoir chercher un stage au plus vite.

Donc on a fait la liste des compétences qu'ils auront à terme :

* front : html5, css3, javascript, bootstrap
* back : php, symfony, twig, SQL, MySQL, Markdown
* divers : git, MVC, Merise (MCD), méthode agile, ligne de commande, vscode ...

### Présentation de l'environnement de travail

=> les différents types de sociétés (industrie, service, SSII, freelance ...) et leurs avantages / inconvénients.

### Exemple de code

On a codé rapidement ensemble une simple page pour faire un airbnb. En 20min avec bootstrap pour voir que c'est assez simple / rapide, si on réfléchit en amont.

### Prise en main

Présentation du répertoire personnel : `C:\Users\greta.HP05xxx.000\`, arborescence des répertoires sur windows et macos.

> création du répertoire "Code/" pour stocker correctement son code dans son dossier personnel.

Puis on a commencé les balises html, et ce qu'est un langage de balisage : apporter du sens (du contexte) à un texte brut. Ce sens est interprété par le navigateur qui ensuite va faire un affichage différencié entre les éléments.

> présentation vscode, notamment Emmet (avec "lorem" etc. pour l'aide au développement) qui est intégré à vscode
## Mardi 2021-10-19

Points Html

### Chemins relatifs

=> notamment pour les attributs "href" ou "src" des balises `<a>`, `<img>` ... 

L'idée c'est de penser à un arbre généalogique :

> la règle c'est que je n'ai accès qu'à mes frères et soeurs !

```
grands parents 
   | -- parents 
       | -- rihanna
       | -- marlène 

```

Ici Marlène est la soeur Rihanna : au même niveau.

=> "chemin relatif" de Marlène par rapport à Rihanna c'est "Marlène".

```
grands parents 
   | -- parents 
       | -- rihanna
       | -- diallo
           | -- marlène 

```

Marlène devient la tante de Rihanna, donc le chemin relatif c'est "diallo > marlène".

Pour les répertoires c'est aussi une organisation "généalogique" (une **arborescence**).

> exemple pour la nièce en version "répertoire" : `diallo/marlène` ou `video/gangnam_style.mp4`.

Subtilité pour accéder au parents :

je ne peux pas écrire `parents/marlène` => sinon mes parents sont mes frères et soeurs... 

Un répertoire peut avoir combien de parents ?? **1 seul** => on utilise l'alias `..`. Cela nous positionne au niveau supérieur, comme un frère/soeur de nos parents.

> exemple pour accéder aux grands parents : `../../grandsparents`.

### Balises auto-fermantes

Elles n'ont pas besoin d'encadrer du texte.

**Pour autant il faut les fermer quand même !!!**

Avec un `/` avant le `>`.

ex: `<img src="" />`

### Balises sémantiques HTML5

Sur le [site développeur Mozilla](https://developer.mozilla.org/fr/docs/Web/HTML/Element#content_sectioning) on trouve la liste des balises html5 qui permettent de découper son contenu de manière intelligible.

> on ajoute de l'information à la structure de notre page !
>
> On est en mesure de dire "telle partie" concerne tel genre de choses (la navigation, le footer ...), telle partie forme un tout ("`<article>`") etc.

On peut utiliser des `<div>` à la place, mais on perd de l'information. **OR l'informatique c'est la manipulation de l'information** donc perdre de l'info c'est *MAL* !

Autant que possible on essaie donc de découper sa page d'une manière similaire à :

```html
<body>
    <nav>Navbar</nav>
    <header>Entête</header>
    <main>
        <section>
            <article>
                <section>

                </section>
                <section>

                </section>
                 <section>

                 </section>
                 <aside>

                 </aside>
           </article>
           ...
        </section>
        <section>
            ...
        </section>
    </main>
    <footer>Pied de page</footer>
</body>
```

En adaptant les sections/articles/aside à son contenu, _bien évidemment_.

### Accessibilité

#### Définition

> L'accessibilité est la mise à disposition de vos sites web au plus grand nombre. On pense souvent que cela s'adresse aux personnes ayant un handicap, mais cela concerne également d'autres groupes comme ceux utilisant des appareils mobiles ou ceux qui ont des connexions internet de faible débit.
> 
> On peut aussi dire que l'accessibilité c'est traiter tout le monde de la même manière, et donner les mêmes opportunités à tous, peu importe leur handicaps ou les circonstances. De la même manière qu'il est injuste d'empêcher une personne d'accéder à un bâtiment parce qu'elle est en fauteuil roulant (les lieux publics sont souvent équipés de rampes d'accès ou d'ascenseur de nos jours), il est également injuste d'empêcher une personne d'accéder à un site web parce qu'elle a des troubles de la vue, ou qu'elle utilise un téléphone portable. Nous sommes tous différents, mais nous sommes aussi tous humains, ce qui nous donne les mêmes droits.
> 
> Rendre son site accessible est la bonne chose à faire, mais c'est aussi demandé par la loi de certains pays, et cela peut vous ouvrir des marchés conséquents pour qui vos services et vos produits ne seraient sinon pas accessibles.
> 
> L'accessibilité et les bonnes pratiques qu'elle implique peuvent bénéficier à tous :
>
> * Le HTML sémantique (qui rend votre site plus accessible) rend également votre site plus optimisé pour les moteurs de recherche, ce qui améliore le référencement de votre site.
> * Se préoccuper de l'accessibilité c'est faire preuve d'éthique et de morale, ce qui améliore votre image publique.
> * Des bonnes pratiques améliorent l'accessibilité rendent également votre site plus facilement utilisable par différents groupes comme les utilisateurs de téléphones portables, les personnes ayant un faible débit, etc. En fait, tout le monde peut tirer un bénéfice de ces améliorations.
> * A-t-on mentionné que c'est la loi dans certaines régions ?

[source](https://developer.mozilla.org/fr/docs/Learn/Accessibility/What_is_accessibility)

Ceci est un argument pour utiliser correctement les balises sémantiques vues au dessus.

### Balises textuelles classiques

* ul/li : liste non ordonnée
* ol/li : liste ordonnée
* p : paragraphe
* ~b~ : ne pas utiliser, c'est de la mise en forme !
* ~br~ : ne surtout pas utiliser !! et surtout pas sous sa forme "non fermée" : `<br>` :dead: Au pire utiliser `<br />`. Mais au mieux il faut s'en passer
* strong
* em
* span
* div

On se réserve `<table>` et `<form>` pour la prochaine fois.

Pour l'instant il faut bosser sur un site perso, sur un sujet quelconque, à condition de bien respecter la structure sémantique du site.
## Lundi 2021-10-25

Révision des balises déjà vues.

### Différence GET/POST dans les formulaires

Lorsque l'on valide un formulaire, on envoie une requête contenant les données du formulaire à l'adresse remplie dans l'attribut `action`.

Tout ceci passe par internet pour atteindre sa destination !

![cables sous marins](https://www.eurafibre.fr/wp-content/uploads/2018/12/carte_cables_sous-marins__reseau_internet_monde.jpg)

Pour ce faire, l'information est en fait découpée en 2 : l'adresse et le contenu.

> C'est la même idée que l'adresse sur l'enveloppe et la lettre (=contenu) à l'intérieur.

On identifie donc 2 méthodes "HTTP" pour faire cet envoi d'information :

* GET = on envoie adresse + données dans l'adresse (un peu comme une carte postale)
* POST = on sépare bien les données et l'adresse (ex: enveloppe standard)

Ainsi on utilise _plutôt_ le GET pour récupérer des informations. (et les précisions dans l'adresse permettent de donner des instructions, ex : sonner chez Mme Bidule) Tandis qu'on utilise _plutôt_ le POST pour envoyer des informations (qui sont cachées aux yeux du "facteur").

### Commentaires

```html
<!-- Ici ce n'est pas affiché -->
```

### Attribut : 'style'

On peut modifier le style d'un élément HTML (càd une balise) en utilisant l'attribut `style`.

ex: 
```html
<span style="color:blue">bonjour</span>
```

### Introduction à flexbox

"flexbox" permet de positionner des blocks les uns par rapport aux autres (plutôt que de les laisser juste les uns sous les autres).

[ressource indispensable](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)

Lorsqu'un élément devient "flex" (en utilisant: `display=flex` dans le style), alors **il est en mesure de décider du positionnement de ses enfants, et _uniquement_ de ses enfants**.

Par exemple, il peut décider de mettre ses enfants en ligne au lieu de colonne, et de les séparer par des espaces s'il y a des espaces en trop.

```html
<nav>
    <ul style="display:flex;justify-content:space-evenly;">
        <li>lien 1</li>
        <li>lien 2</li>
        <li>lien 3</li>
    </ul>
</nav>
```

On peut également faire afficher les enfants en colonne (`flex-direction:column;`), ou les positionner les uns par rapport aux autres sur l'axe "perpendiculaire" à la flex-direction.

Pour s'entraîner on a positionné les blocs de notre page "perso", et on a déroulé une partie du site css-tricks.

exercice:

Créer 2 articles, centrer l'intérieur de chaque article horizontalement (donc perpendiculairement à l'axe principal vertical), puis positionner les 2 composants l'un par rapport à l'autre pour que leurs centres soient alignés sur l'axe horizontal.

> TODO dessiner le schéma
## Mardi 2021-11-02

### Exercice mise en page CV

Refaire son cv avec une barre à gauche qui contient
la photo, le nom/prénom, les compétences et les langues.

Et à droite les expériences, les formations et le formulaire de contact.

> but : utiliser flexbox + margin / padding, align-items pour centrer sur l'axe perpendiculaire à la flex-direction etc.

#### Point sur les enfants flexbox qui désobéissent

`align-self: end`, sur l'enfant, écrase `align-items: center;` du parent.

### UX / UI

Premier aperçu de la différence entre :

* l'expérience utilisateur : sa facilité de compréhension de l'application, la rapidité avec laquelle il prend en main le site, son ressenti ...
* et l'interface utilisateur : les éléments de style qui lui plaisent, qui facilitent la lecture éventuelle, qui donnent vie à la page etc.

Petite [vidéo explicative](https://www.youtube.com/watch?v=Ovj4hFxko7c)

### Responsive

Présentation des `@media-queries`.

Référence sur [developper mozilla](https://developer.mozilla.org/fr/docs/Web/CSS/Media_Queries/Using_media_queries).

Exemple 

```css
.selecteur {
    propriété: valeur1;
    autre_prop: autre_valeur;
}

@media screen and (max-width: 376px) {
    .selecteur {
        propriété: valeur2; /** écrase la valeur 1 */
        /** mais se cumule avec autre_prop de valeur autre_valeur */
    }
}
```

> Exercice: rendre son CV responsive, en l'affichant sur une seule colonne en mode "smartphone".
>
> Corrigé en une ligne: passer le parent des 2 blocs situés côte à côte en style : `flex-direction: column;`. *Et voilà !*

On peut aussi afficher son numéro de téléphone en mode smartphone et le cacher en mode tablette ou pc. (=> `display: none;`);
## Mardi 2021-11-09

### Révision css

### Découverte nouvelles propriétés css

#### Modificateurs css : `:nth-child(An+B)`

Permet de ne sélectionner un élement que s'il est le "n-ième" enfant de son parent.

Le test est valide si le numéro "x" de l'élément est bien égal à un moment à la formule "An+B" (avec n qui va de 0 au max des enfants).

exemple :

```css
/** Le <li> ne sera rouge que s'il est le 3ème enfant de son parent */
li:nth-child(3) {
    background-color: red;
}
/** le <li> sera gris uniquement s'il est impair : car si n vaut 0 alors on grise le <li> numéro 2*0+1 (donc 1), quand n vaut 1 alors on grise le <li> numéro 3, puis pour n vaut 2 on grise le 5 etc. */ 
li:nth-child(2n+1) {
    background-color: gray;
}
```

Il existe aussi le modificateur qui compte à partir de la fin : `:nth-last-child(An+B)`.

Ou un autre qui prend le dernier : `:last-child` etc.

#### Modificateurs css : `::after`

Permet d'écrire un contenu après l'élément selectionné par le selecteur css.

exemple:

```css
/** met une virgule à la fin de tous les <li> */
li::after {
    content: ', ';
}
```

### Initiation à git

Présentation de git et de son intérêt (pourquoi il existe !).

Utilisation du site [learn git branching](learngitbranching.js.org) pour découvrir les premières commandes et les branches.

* git commit
* git branch "branch1"
* git checkout "branch1"
* git merge "branch1"

### Initialisation d'un repo git pour son code greta

1. installer git ([gitforwindows.com](https://gitforwindows.com)), ou `brew install git` ou autre
2. ouvrir son workspace vscode pour être dans le bon répertoire
3. `git init .` dans un terminal vscode
4. `git add nom_du_fichier_ou_du_repertoire` pour indiquer les fichiers que l'on veut "sauvegarder"
5. `git commit` => attention il faut rentrer un message sinon il refuse le commit, et c'est casse pied ! donc on préfèrera `git commit -m`.
## Mardi 2021-11-16

### Git + Github

* révisions git + commit des codes effectués jusqu'à présent
* explications github : site qui permet de centraliser les repositories et les branches de git
* création de compte github
* paramétrage vscode (attention aux pcs windows pas à jour, il faut utiliser la clé ssh dans ce cas là)
* push du code vers github dans un repo privé

### Reprise de bootstrap

#### Composants et layouts

* container
* fonctionnement de la grid
* progressbar
## Mercredi 2021-11-17

On commite bien tout le code effectué hier !

Puis on commence à travailler.

### Bootstrap

Poursuite de la découverte de bootstrap :

* carousel
* card
* bouton group
* tooltip
* **modal** !

### Fontawesome

Utilisation du css / js pour afficher des pictogrammes

### Exercice

Créer une deuxième Modal associée au bouton login qui contient le formulaire de login.
## Mardi 2021/11/23

### Révisions javascript

* déclaration de variables : `var, let et const`: différences (modifiable, redéclarable)
* assignation des valeurs
* prompt / alert / document.querySelector
* fonctionnement du html dans le navigateur (version en mémoire que l'on peut modifier, sans toucher à index.html)
* get/set 

### Découverte des boucles

Syntaxe js des boucles :

```js
for (let i = 0;i<10;i++){
    // traitement
}
```

Exercice : demander un nombre à l'utilisateur et énumerer tous les nombres de 0 au chiffre demandé dans une liste html.
## Mercredi 2021/11/24

### Boucles + tableaux

On continue sur les boucles + découverte des tableaux.

En particulier on essaie de faire une boucle pour parcourir tous les éléments d'un tableau et les afficher à l'écran.

Exercice: afficher la liste des élèves, à partir du tableau qui contient les prénoms.

### Fonctions

Il s'agit d'un concept.

Une fonction est un traitement qui prend des "arguments" en entrée, et qui renvoie le résultat du traitement effectué sur les arguments donnés.

Fonctionnement "boîte noire" : la fonction ne doit pas changer au fil du temps ! (cf : `document.querySelector('selecteurCss')`).

=> **Même résultat pour même argument en entrée !**

```sh
             .__________.
entrée ----> | fonction | -----> sortie
             |__________|
```

### 2 étapes

#### 1. Définition / Déclaration

Syntaxe en javascript:

```js
function nomDeMaFonction(argument1, argument2){
    /** Ici traitement en javascript ! */
    // Par exemple : 
    let somme = argument1 + argument2
    return somme; // ce que la fonction "renvoie" en sortie
}
```

cf en mathématique : `f(x)=x+1`.

NB: argument1 et argument2 sont des variables, qui seront déclarées au moment de l'exécution de la fonction, et dans lesquelles on mettra les valeurs données en argument.

#### 2. Execution

ou : comment utiliser la fonction ?

```js
let valeur1 = "valeur1";
let valeur2 = "valeur2";
const resultat = nomDeMaFonction(valeur1, valeur2);
// Questions :
// resultat contient quoi ?
// resultat -> "valeur1" + "valeur2" -> "valeur1valeur2"
```

#### Exercice

Faire une fonction qui calcule le carré du chiffre donné par l'utilisateur via un prompt.
## Mardi 2021-11-30

### Fonctions

Révisions fonctions:

* ne pas utiliser de variable extérieure à la fonction
* si besoin de passer des informations, les passer par le biais des paramètres de la fonction.

=> Imaginer le déroulement comme des pièces de puzzle qui s'imbriquent les unes dans les autres, où les sorties de l'une sont les entrées de l'autre.

On reprend exercice pour appeler des fonctions dans des fonctions.

#### Exercice

Décomposer un traitement en multiples fonctions.

A partir d'un tableau qui contient les élèves (sous forme d'un tableau également), écrire les fonctions qui permettent leur affichage sous forme de cards.

Commencer par écrire sa démarche sur papier, puis déterminer les fonctions (squelette) puis les coder.

Une fois avancés, un peu d'aide :

```js
const studentsDWWM = [
    ["léponge", "bob", "5", "https://i.pravatar.cc/100?u=léponge"],
    ["émorti", "rik", "99", "https://www.stevensegallery.com/100/100"],
];

/**
 * 
 * @param {Array} students Tableau de tableaux [ [nom, prenom, age, avatar], ]
 * @returns {string} Le html de toutes les cards de tous les étudiants
 */
function genCards(students) {}

/**
 * 
 * @param {Array} student [nom, prenom, age, avatar]
 * @returns {string} La card html pour un étudiant
 */
function genCard(student) {}

function getStudentInfos(student) {}

function genHtmlCard(header, content, footer) {}

// Appel de la fonction et écriture dans le HTML
document.querySelector("div#students").innerHTML = genCards(studentsDWWM);

```
## Mercredi 2021-12-08

On reprend l'exercice sur les cards pour les fonctions.

### Révision complète sur les fonctions

Ce n'était pas bien compris. On reprend avec l'exemple des processus/instructions dans l'administration :

Comment se passe, quelles sont les étapes, de la création d'une CNI.

De quoi le fonctionnaire a besoin en entrée de son traitement ? (une photo d'identité, un justificatif de domicile ...)

Est-ce qu'on peut décomposer son traitement en sous-traitement ?

=> cela pourrait donner plusieurs fonctions et sous fonctions.

### Reprise de l'exercice

Bien différencier le "return" d'une fonction, avec son traitement qui peut éventuellement "écrire dans le HTML".
## Jeudi 2021-12-09

Correction de l'exercice sur les Cards/fonctions.

Beaucoup de difficultés dans le groupe. Se mettent à mélanger les concepts dès qu'il y en a un qu'ils ne comprennent pas.

### Exercice simple fonction

Créer un formulaire de 2 champs : montant et durée.

Ajouter un bouton qui déclenche la multiplication du montant et de la durée, pour connaître son salaire au bout de X mois. Et l'afficher en dessous.

Quand terminé, ajouter un select pour choisir la monnaie, et l'ajouter à l'affichage.

Puis calculer la TVA et l'afficher entre parenthèses à côté.
## Mardi 2021-12-14

### Tableaux associatifs

Il s'agit d'un tableau donc les index ne sont pas numériques (comme on a eu l'habitude jusqu'à présent) mais "string".

Pour récupérer un élément dans un tableau normal, je dois indiquer sa position dans le tableau. (ex: `tableau[1]`).

Dans un tableau associatif, je le récupère par sa clé (ex: `tableau["nom"]`).

#### 2 syntaxes de déclaration / écriture

1. Les clés sont des strings, et on l'indique explicitement :

    ```js
    const eleve = {
        "nom": "SON_NOM",
        "prenom": "SON_PRENOM",
        "age": 25,
    };
    ```

2. Les clés sont toujours des strings mais c'est implicite :

    ```js
    const eleves = {
        nom: "SON_NOM",
        prenom: "SON_PRENOM",
        age: 25,
    };
    ```

#### 2 syntaxes d'utilisation / lecture

1. Explicite, sur le même type que pour les tableaux à indices numériques :

    ```js
    const nom = eleve["nom"];
    ```

2. Implicite, l'indice est collé avec ".", sans préciser qu'il s'agit d'une string

    ```js
    const nom = eleve.nom;
    ```

#### Typage et commentaires

```js
/**
 * @param {{nom: string, prenom: string}} eleve - Elève à traiter
 */
function traitement(eleve){}
```

### Exercice

Afficher la liste des élèves dans une table HTML.

```js
const studentsDWWM = [
    {"nom": "léponge","prenom": "bob","age" : "5","avatar": "https://i.pravatar.cc/100?u=léponge"},
    {"nom": "létoiledemer","prenom": "patrick","age" : "25","avatar": "https://i.pravatar.cc/100?u=létoiledemer"},
    {"nom": "z","prenom": "dragonball","age" : "105","avatar": "https://i.pravatar.cc/100?u=z"},
    {"nom": "han","prenom": "sango","age" : "12","avatar": "https://i.pravatar.cc/100?u=han"},
    {"nom": "seagall","prenom": "steven","age" : "?","avatar": "https://www.stevensegallery.com/100/100"},
    {"nom": "émorti","prenom": "rik","age" : "99","avatar": "https://www.stevensegallery.com/100/100"},
];
```

=> [exercice et corrigé](https://github.com/dwwm93/2021/tree/main/2021-12-14_tableaux_associatifs)

### TP Banque

#### Consignes

1. créer les tableaux JS par compte, qui contiennent les tableaux associatifs pour chaque ligne de compte ,
2. afficher en HTML chaque compte dans un tableau html distinct
3. calculer et afficher le solde du compte (le total du montant des opérations)
exemple de tableau associatif pour une ligne de compte :

```js
{
   operation: "Kebab Royal",
   montant: 9.00,
   date: "2021/12/14",
}
```

=> [exercice et corrigé](https://github.com/dwwm93/2021/tree/main/2021-12-09%20tp%20banque)
## Lundi 2021/12/20

1. Exercice site de vente en ligne "Esat", à continuer
2. Correction site TP Banque "Marc"

Beaucoup de points revus ou à revoir sur ces exercices "généralistes".

### Précisions sur les @typedef

```js
/**
 * @typedef {xxx} NomType - description
 */
```
## Lundi 2022/01/03

Reprise à distance après les vacances.

On reprend du temps pour faire les exercices sur les cadeaux de noel.

[voir code associé](https://www.github.com/dwwm93/2021/tree/main/2022-01-04_cadeaux_noel)

### Nouveautés

* push dans un tableau
* (revision) écrire dans un tableau associatif (`tableau["clé"] = "test"`)
* markdown dans discord
* parcourir les clés d'un tableau associatif avec `for (clé in tableau) { ... }`
* `if ( undefined )` est comme `if (false)`
* sensibilité à la "casse" [wikipedia](https://fr.wikipedia.org/wiki/Sensibilit%C3%A9_%C3%A0_la_casse)
## Mardi 2022/01/04

Correction de l'exercice 2 des cadeaux de Noël en live coding.

\+ réponse aux questions soulevées
## Lundi 2022/01/10

Débrief examen de vendredi d'avant par Esat.

### Approfondissement jquery

=> `$` est le nom de la fonction `jQuery` (oui c'est bizarre !).

#### Fonctionnement

Quand je fais en jquery : 

```js
$('thead').addClass('hello');
```

je fais 2 actions successives :

1. je récupère l'élement HTML associé au selector
2. je déclenche la fonction "addClass" de jquery qui ajoute la classe dans le html sur l'élement récupéré en 1 !!!!!

#### Reprise sur les getter/setter

```js
/** getter = pour recuperer la valeur d'un champs du formulaire (input,select,textarea...)
 * utiliser :
 */
const res = $(selecteur).val() 
/**
 *  setter =pour modifier la valeur d'un champs du formulaire (input,select,textarea...)
 * utiliser : 
 */
$(selecteur).val("la nouvelle valeur") 

/** getter = pour recuperer le text d'une balise (div,p,span...)
 *  on utilise :
 */
const res2 = $(selecteur).text() 
/**
 *  setter = pour modifier le text d'une balise (div,p,span...)
 *  on utilise :
 */
$(selecteur).text("le nouveau text") 

/** getter = pour recuperer le html d'une balise (div,p,span...)
 *  on utilise :
 */
const res3 = $(selecteur).html() 
/**
 *  setter = pour modifier le html d'une balise (div,p,span...)
 *  on utilise :
 */
$(selecteur).html("<p>le nouveau html</p>") 

/** getter = pour recuperer l'attribut d'une balise quelconque (ex: href pour a ..)
 *  on utilise :
 */
const res4 = $(selecteur).attr('href') 
/**
 *  setter = pour modifier un attribut d'une balise (div,p,span...)
 *  on utilise :
 */
$(selecteur).attr('href', 'https://impots.gouv.fr') 
```

#### Exercices jQuery W3schools

[w3schools](https://www.w3schools.com/jquery/exercise_jq.asp?filename=exercise_jq_selectors1)

On les fait presque tous  (selectors , get, set, add, remove, hide and show, etc.) sauf events surtout

#### Découverte des "Events"

en français les "événements"

=> on est capables de déclencher des fonctions javascript , lorsque certains "events" ont lieu

2 parties prenantes dans ce sujet :

1. l'événement en tant que tel associé à l'élément HTML qui l'a déclenché
2. la fonction qui "écoute" les événements, pour se déclencher quand elle en voit un passer qui correspond à ce qu'elle attend

```js
$("button").click(function(){
  $(this).hide();
});
```

⚠️  attention, ça ne veut pas dire que le js déclenche le click, mais qu'il réagit s'il y a un clic !

ici le this correspond à l'élément qui a déclenché l'événement, donc c'est "button" et $(this) ça nous renvoie le bouton en version "jquery".

##### Syntaxe bis

```js
$(selector).on("event", function(){ .....;});
```

avec "event" : "click", "dblclik" etc.

#### Nouveautés

* méthodes :
  * une fonction : `xxxx(yyy)` : la fonction est générique
  * une méthode : `machin.xxxx(yyy)` : la fonction s'applique sur machin
* callback
* this

### Exercice

> Faire un formulaire

1. validation des champs email quand j'écris dans chaque intput (keypress) et souligner en rouge tant que c'est faux
2. changer la couleur du bouton en "gris" et non cliquable (désactivé), quand on clique sur "envoyer"
3. Afficher l'aide au survol des inputs (et ça change le texte en orange)

#### Correction 1

```js
$('input').on("keypress", function (){
  const input = $(this);
  const inputVal = input.val();
  if (!/^[\w]+@[\w]+\.[\w]{1,3}$/.test(inputVal)) {
    input.addClass("error");
  } else {
    input.removeClass("error");
  }
})
```
## Mardi 2022/01/11

Révisions event jQuery :

```js
function isEmail(){
  // contenu
}
$('input').on("keypress", isEmail)
```

Ici on a une fonction nommée, alors qu'hier on a vu des fonctions "anonymes".

> le principe de passer une fonction déclarée, non exécutée, à exécuter plus tard (quand l'événement "keypress" survient), s'appelle passer une fonction callback.

### Exercice d'hier

On continue + correction

Si vous avez trop de temps : on fait un bouton qui affiche la modal qui contient le formulaire des questions 1., 2 et 3

contrainte : au moins une fois, utiliser une fonction "non anonyme", donc déclarée avant

#### Désactiver le bouton du formulaire quand on clique dessus

```js
function disableButton(button) {
    $(button).attr('disabled', true)
}
$('form#exercice>button').on('click', function(){
    disableButton(this);
})
```

#### Afficher une aide au survol de l'input et passer le texte en orange

```js
function afficheAide(){
  $(this).addClass('text-orange');
  $('#helperText').show();
}
$('form#exercice>input.helper').on('mouseenter', afficheAide);
```

#### Afficher / cacher la modal avec le formulaire

```js
$('button#showModal').on('click', function() {
  $('#modal').toggle();
})
```

### Révision callback avec le visiteur du futur

[visiteur ep1](https://www.youtube.com/watch?v=1wtGLc_Fvf0)

un callback c'est "voilà ce qui va se passer" !

Tu sais que Paris va exploser, mais tant que t'as pas jeté la canette ça se passera pas.

Nous c'est pareil, tu fais une fonction que tu n'exécutes pas, tu sais ce qu'il va se passer, mais l'exécution est retardée au clic de l'utilisateur par ex.

### Correction exam en live coding

[voir code associé](https://www.github.com/dwwm93/2021/tree/main/2022-01-10_correction_exam)
## Mercredi 2022/01/12

Poursuite de la correction de l'examen.

Questions / réponses.

### Révisions

- tableau
- tableau associatif
- fonctions
- appeler une fonction js depuis un bouton HTML lui même généré par le js
- ... (voir la correction)

### Nouveautés

- html input required
- html input pattern
- css `:has`
- css `:valid`et `:invalid`
- faire sa propre modal

### Première présentation API + AJAX

- API : site wikipedia
- AJAX : site mozilla

Exemple avec la récupération des données depuis la pokeapi.
## Lundi 2022/01/17

### Poursuite sur les API

Explication de la nature "asynchrone" de l'appel.

Exemple avec l'exercice d'afficher les images des pokémons depuis la pokéapi.

Le problème étant de faire 2 appels distincts, alors qu'on ne sait pas si le html existe etc.

### Début PHP

L'après midi installation de composer / PHP pour le mettre dans le PATH.

#### Premiers codes

Distinction entre PHP langage et PHP logiciel.

Exécution du php dans le terminal pour générer des "fichiers texte".

Utilisation de wamp pour voir le fichier texte généré dans un navigateur.
## Mardi 2022/01/18

Poursuite PHP + exercices de la veille

### Notions abordées

- fonctions
- tableaux
- tableaux associatifs
- boucles for
- boucles foreach
- écrire du HTML et du PHP
## Mardi 2022/01/25

### Router

- à quoi ça sert
- comment l'implémenter

### Architecture du code

On commence à prendre qques bonnes pratiques dans les répertoires (pages, templates ...)

### Form

Récupération des infos dans la super globale `$_POST`, appel du formulaire sur lui même (`action='index.php?page=form` , donc en utilisant bien le router !), décomposition des variables et test de leur validité en back.

Exercice pour associer test en front et test en back.

Voir le code associé.
## Vendredi 2022/01/28

### Base de données

(Re)Définition et (re)présentation de :

- SQL
- mysql
- phpmyadmin

### LDD / LMD

Explications à nouveau sur LDD et LMD, et comment on les utilise / différencie.

### SGBDR

Gros point sur les SGBDR, ce que ça signifie et la différence avec "sans relation".

> l'important c'est la CONTRAINTE

### Exercice

1. Création d'un fichier de migration pour créer la nouvelle table `user` pour le formulaire.
2. Insertion d'un utilisateur si le formulaire est bien rempli
## Lundi 2022/01/31

Poursuite de l'exercice sur l'inscription d'un utilisateur (avec test et insert en base)

### Cours : HTTP

Point cours sur le **PROTOCOL** HTTP, et son analogie avec le courrier papier.

Explications sur GET / POST et le lien avec `$_GET` et `$_POST`.

- `$_GET` : tableau associatif des données disponibles dans l'url
- `$_POST` : tableau associatif des données disponibles dans le corps du message (à l'intérieur de l'enveloppe)

NB: un navigateur envoie un form GET ou POST en fonction de l'attribut `method` dans le html.
## Mardi 2022/02/01

### Révisions PDO + SQL

- syntaxes pour les requêtes (`exec` vs `prepare + execute`)
- syntaxes pour les variables (`bindParam`, named ou avec les `?`)

### Révisions formulaire

### Exercice

Faire un formulaire de connexion (qui affiche juste "ok" si réussi) et ajouter une page pour lister les utilisateurs.

### Cours : présentation des SESSION PHP

```php
# Dans index.php
session_start()

# Ailleurs :
$_SESSION["key"] = "value";
# ex : if (@$_SESSION["connected"]) { ... }
```

Et leur utilité pour "connecter" un utilisateur.

La session est récupérée de la mémoire PHP grâce à un ID unique qui est partagé avec le navigateur dans un Cookie.
## Lundi 2022/02/07

### SQL

* ORDER BY
* GROUP BY

### PHP

* fixtures pour remplir des données
* faire un site de news à partir de MCD fait avec Esat

### exo: faire le php du site de news

1. afficher la liste des articles (titre et id) dans la page articles
rappel on passe par le routeur, donc l'url c'est `index.php?page=articles`
2. remplacer la liste des titres par une liste d'urls qui pointent vers `index.php?page=articles&id=xxxx`
3. créer les pages associées au lien `index.php?page=articles&id=xxx` qui affichent le contenu de l'article d'id "xxx"
## Mardi 2022/02/08

### SQL

On apprend le JOIN !

```sql
SELECT *
FROM table1
JOIN table2
ON table1.table2_id = table2.table2_id
```

Plein de petits exercices associés, dont des pages spécifiques
dans le site de news pour récupérer les catégories des articles,
l'auteur des articles etc.

1. afficher dans la liste des articles en php, la catégorie devant le titre (par ex on affiche :  `1 [Economie] Le bitcoin se casse la figure pour la 28eme fois aujourd'hui`)
1. dans article ajouter utilisateur qui à écrit l'article si clique sur utilisateur => vers page de l'utilisateur

### Exercice SQL

3 requetes sur phpmyadmin à écrire :

1. la liste de tous les articles écrits par esat
2. La liste de tous les rôles de l'utilisateur Esat
3. et si vous avez fini, la liste de tous les articles écrits par un utilisateur qui a le rôle "admin"

```sql
-- 1
SELECT article.titre_article FROM article JOIN user ON user.id_user = article.id_user
WHERE user.prenom_user = 'DJAMEL';

-- 2
SELECT role.*, user.nom_user, user.prenom_user 
FROM role 
JOIN posseder ON role.id_role = posseder.id_role
JOIN user ON user.id_user = posseder.id_user
WHERE prenom_user = 'DJAMEL';

-- 3
SELECT article.titre_article 
FROM article 
JOIN user ON user.id_user = article.id_user 
JOIN posseder ON posseder.id_user = user.id_user 
JOIN role ON role.id_role = posseder.id_role 
WHERE role.nom_role = 'utilisateur';
```
## Lundi 2022/02/14

### POO

Révision Programmation Orientée Objet :

- classes = moule / structure
- objet = version "physique" de la structure (ie avec des vraies données)
- l'action de générer un objet depuis la classe s'appelle l'instanciation
- Première approche de l'héritage

### Exercice

Refonte site news en POO :

- faire une classe article
- faire une classe user
- afficher les articles et les users (en utilisant les méthodes getter)
- utiliser une méthode statique pour récupérer la liste des articles
- idem pour users
- récupérer un article (resp. un user) depuis la base article (resp. user) avec une fonction statique
- ajouter un getter getUser dans Article pour obtenir l'objet User associé à Article (donc en utilisant `User::getUser($article->getUser())`)
## Mardi 2022/02/15

### Exercice

Réécrire le Routeur du site de news en mode objet.

### Cours

MCD : ne pas oublier routeur et bdd

### Installation symfony + première page

```sh
composer create-project symfony/skeleton:"^5.4.99" REMPLACER
cd REPLACER
composer require webapp
```

Télécharger la cli symfony et utiliser `server:start`.

### Premier controller

héritage + namespace.

Afficher la premiere vue grâceà $this->render !
---
title: Symfony
subtitle: Introduction à l'utilisation
author: Marc CHENEBAUX
date: 2022/02/18
transition: fade
theme: serif
overview: true
revealjs-url: https://unpkg.com/reveal.js@3.9.2
...

# Librairie vs Framework

---

- librairie : des blocs de codes à intégrer dans votre structure
- framework : une structure dans laquelle vous intégrez des bouts de votre code !

---

## Dans le cas de symfony

- soit on prend les petits bouts qu'on met dans son code (donc librairie), par ex: utiliser symfony mailer pour envoyer des mails, ou twig pour le templating (mise en forme)
- soit on utilise le squelette qu'on nous propose : ie quasiment tous les modules de symfony, et on doit adapter notre code en conséquence.

---

## Cas framework

### Installation

```sh
composer create-project symfony/skeleton:"^5.4" nom_de_rep_au_choix
# ou "^5.4.99" si ça plante
# on n'utilise pas la version 6 car elle nécessite PHP8 qui n'est pas sur les ordis du GRETA
# cd = change directory : on se déplace en ligne de commande
cd nom_de_rep_au_choix
composer require webapp
```

---

### Explications

Il faut se conformer à la structure :

```sh
.
├── assets             => fichiers js, css ...
├── bin
│   └── console        => bin/console !! *\o/*
├── composer.json      => sauvegarde les dépendances
├── composer.lock      => indique les dépendances installées
├── config
├── migrations
├── public
│   └── index.php
├── src
│   ├── Controller
│   ├── Entity
│   └── Repository
├── templates
├── vendor
```

---

- `config/` : répertoire des configurations (fichiers `yaml`)
- `src/` : répertoire qui contient les sources de notre code
- `src/Controller/` : code qui concerne les ... controllers
- `src/Entity/` : TBD
- `src/Repository/` : TBD
- `templates/` : répertoire des templates `twig` pour générer les vues

---

- `vendor/` : répertoire géré par `composer` qui contient les sources de tous les projets que l'on utilise (ex: les sources de symfony, les sources de twig, les sources de doctrine etc.) => répertoire non versionné par git ! il suffit d'utiliser `composer install` pour réinstaller tout `vendor`. (`composer` utilise alors le fichier `composer.json`)
- `public/` : répertoire qui contient le fichier index.php et qui est exposé au monde entier (contrairement à nos sources!)
- `migrations/` : répertoire des traitements `LDD` [^ldd] (et parfois `LMD`[^lmd] mais **anecdotique**)

[^ldd]: ou DDL - Langage de définition des données
[^lmd]: ou DML - Langage de manipulation des données

---

## Lancer le serveur web

- Pour avoir accès au fichier `index.php` dans `public/`
- et pour avoir des urls "jolies" (ex: `localhost/articles` au lieu de `localhost?page=articles`, ou `localhost/articles/1` au lieu de `localhost?page=articles&id=1` !!)

=> on doit paramétrer son serveur web (ex: apache pour wamp).

---

Pour se faciliter la vie, on utilise celui qui est fourni par le logiciel "symfony"[^symfony-cli] (`symfony-cli`, càd symfony en ligne de commande), en faisant :

```sh
symfony server:start
```

[^symfony-cli]: pour l'installer, se rendre sur [la page de téléchargement](https://symfony.com/download)

# MVC

---

Symfony utilise le _design pattern_ (= organise son code) **MVC**.

- Model : partie du code qui va gérer les données et parler à la base
- Controller : chef d'orchestre, c'est lui qui contient l'intelligence
- View : partie qui gère l'IHM[^ihm] et l'affichage à l'utilisateur

---

- ! Ne pas oublier:
  - router
  - database

à compléter : comment M, V et C intéragissent les uns avec les autres (et dans quel ordre).

[^ihm]: [Interface Homme - Machine](https://fr.wikipedia.org/wiki/Interactions_homme-machine)

---

## Controller

Se trouve dans le répertoire `src/Controller`.

Pour créer un nouveau Controller, je crée un fichier `ArticleController`.

---

```php
<?php

namespace App\Controller;

# "use" est une sorte de "include()".
# utiliser l'auto import, pas besoin de connaître par coeur les
# composants symfony
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\...\AbstractController;
// importer Symfony\...\Response : la réponse HTTP vers l'utilisateur
use Symfony\...\Response;
# code qui vient de mon application :
use App\Entity\Article;

/**
 * Mon controller hérite de celui de symfony,
 * par conséquent j'ai accès à $this->render qui me permet
 * de générer du html en utilisant TWIG.
 */
class ArticleController extends AbstractController
{

    /**
     * @Route("/articles", name="articles")
     */
    public function index() : Response
    {
        /**
         * Traitements intelligents
         */

        $valeur = "val1"; // ou n'importe quel structure PHP
        $article = new Article();

        /**
         * Renvoie la vue !
         */
        // "mon_template" est situé dans le répertoire "templates"
        // penser à indiquer l'arborescence complète à partir de "templates/"
        return $this->render("mon_template.html.twig", [
            "nom_var1" => $valeur,
            "article" => $article,
        ]);

        // bad mais possible: (en vérifiant la bonne syntaxe)
        // return new Response("<html>....");
    }
}
```

---

NB: Symfony vous aide grâce à `bin/console` (petite ligne de commande écrite en php qui vous facilite la vie ❤️)

```sh
php bin/console make:controller CategorieController
```

---

## View

Puis il faut que je construise mon template twig.

```twig
<!-- dans templates/mon_template.html.twig -->
<html>
    <head>...</head>
    <body>
        <h1>{{ nom_var1 }}</h1>
        <p>
            {{ article.contenu }}
        </p>
        <p>On note que l'accès aux propriétés de l'objet article ressemble à la syntaxe du javascript !! (cf <pre>eleve.nom</pre>)</p>
    </body>
</html>
```

# TWIG

---

Langage de templating.

## Cheatsheet

[cheatsheet/antisèche](https://danielmg.org/php/twig-cheatsheet.html)

---

## Syntaxe

- `{{ ma_var }}` : affiche la variable (si elle est affichable)
- `{# mon commentaire #}` : commentaire dans le code twig, non affiché dans le html
- `{% for element in tableau %} {{ element }} {% endfor %}` : boucle
- `{% if ma_var == "jour" %} Bonjour {{ nom }} {% else %} Bonsoir {% endif %}` : test sur les variables disponibles
- etc.

---

### Héritage des templates

```twig
<!-- templates/parent.html.twig -->

<html>
    <head></head>
    <body>
        <nav></nav>
        <main>
            {% block mon_block_main %}
                l'enfant peut effacer le contenu de ce bloc et le remplacer par ce qu'il veut !!
            {% endblock %}
        </main>
        <footer>
            {% block block_footer %}
            {% endblock %}
        </footer>
    </body>
</html>
```

---

et l'enfant :

```twig
<!-- templates/enfant.html.twig -->
{% extends "parent.html.twig" %}

{% block mon_block_main %}
Ici j'écris dans le parent !!!!!

J'utilise ici la variable {{ nom_var1 }}.
{% endblock %}

{% block block_footer %}
Voici le footer de ma page enfant !!!
{% endblock %}
```

---

Permet de réduire la duplication de code et d'avoir un style commun pour tout le site !

# La base de données

---

## Connexion

Les informations de connexion sont stockées dans un fichier `.env` (appelé : `dotenv`).

Il y aura un fichier `.env` différent par machine, cela permet de ne pas partager les informations "secrètes".

---

### exemple

Sur mon pc "maison", dans mon fichier `.env.local` j'indique : login=marc, pwd=marc.

Par contre au greta, dans le fichier `.env.local`, j'indique : login=greta, pwd=greta.

> je peux avoir plusieurs "secrets" différents en fonction de la machine.

---

Attention, on ne commite pas le fichier `.env.local` car il contient des secrets à ne pas partager !!

Le `.env` lui contient les exemples ou les valeurs "non secrètes".

## Informations de connexion

Il faut donc **créer** et écrire dans le fichier `.env.local` :

```.env
DATABASE_URL="mysql://login:mdp@127.0.0.1:3306/2022_news_symfony?serverVersion=8.0"
```

---

Vérification de la connexion (à écrire dans le terminal):

```sh
php bin/console doctrine:database:create
```

ou avec symfony-cli :

```sh
symfony console doctrine:database:create
```

---

## MVC : Model

Partie de l'architecture chargée de "parler" avec la base de données (donc LDD[^ldd] et LMD[^lmd]), et transformer les données de la base vers des données exploitables en PHP.

---

### Représentation Objet

> cf : MCD

Dans mon code "objet" (POO), on ne manipule pas les "tables" SQL. On manipule des objets. Ces objets, qui représentent des données dans la base, sont appelés : **Entités**.

---

### Dans Symfony

On doit créer les "Entity" : les classes qui vont contenir mes données en php.

> à créer dans `src/Entity`

---

Il s'agit de classes PHP, qui seront "mappées" vers les tables de la BDD.

On peut soit :

1. écrire ces classes à la main ! (comme on a fait pour le controller)
2. soit demander à `bin/console` !

```sh
php bin/console make:entity
```

---

```php
<?php

namespace App\Entity;

use App\Repository\ArticleRepository;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity(repositoryClass=ArticleRepository::class)
 */
class Article
{
    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer")
     */
    private $id;

    /**
     * @ORM\Column(type="string", length=255)
     */
    private $title;

    /**
     * @ORM\Column(type="text")
     */
    private $content;

    /**
     * @ORM\Column(type="string", length=100)
     */
    private $image;

    /**
     * @ORM\Column(type="datetime")
     */
    private $date;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getTitle(): ?string
    {
        return $this->title;
    }

    public function setTitle(string $title): self
    {
        $this->title = $title;

        return $this;
    }

    public function getContent(): ?string
    {
        return $this->content;
    }

    public function setContent(string $content): self
    {
        $this->content = $content;

        return $this;
    }

    public function getImage(): ?string
    {
        return $this->image;
    }

    public function setImage(string $image): self
    {
        $this->image = $image;

        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(\DateTimeInterface $date): self
    {
        $this->date = $date;

        return $this;
    }
}
```

---

## ORM

ORM = Object Relational Mapping = correspondance table / classe

Il s'agit d'un bout de code qui sait transformer des objets PHP en tables SQL.

Symfony utilise l'ORM[^orm] qui s'appelle **Doctrine**.

[^orm]: [définition](https://fr.wikipedia.org/wiki/Mapping_objet-relationnel)

---

### Migration

#### Déclaration

```sh
php bin/console make:migration
```

=> Demande à doctrine de générer les requêtes LDD[^ldd] associées aux entités PHP que l'on a crées (donc Article pour nous)

=> regarder dans le répertoire `migrations/` pour les voir.

---

#### Exécution

```sh
php bin/console doctrine:migration:migrate
```

---

## Précisions Symfony

Model = Manager + Entity + Repository
## Lundi 2022/02/28

### ORM

Doctrine est l'ORM utilisé par symfony.

### Découpage de Doctrine

Le Model est découpé en :

- Entity (propriétés de l'entité)
- Repository (lecture)
- Manager (modification)

### Utiliser dans le Controller

```php
$mes_entités = $this->getDoctrine()->getRepository(MyEntity::class)->findAll();
```

ou pour récupérer un élément seulement dans la base :

```php
$mon_entité = $this->getDoctrine()->getRepository(MyEntity::class)->find($id);
```

### Route avec paramètre

```php
/**
 * @Route("/articles/{id}", name="article")
 */
function show($id)
{

}
```

### Url dans twig

```twig
{{ path('name_route', {id: entity.id}) }}
```

### Exercice

Ajouter une page qui liste les articles ou les users, et un lien vers la page (à faire aussi) qui concerne un article ou un user.
## Mardi 2022/03/01

### Formulaires avec Symfony

1. Faire la route et la méthode dans le Controller
2. Faire le template pour la page de création

=> il manque le formulaire html !

- Option 1 : je le fais à la main ...
- Option 2 : je demande à symfony de le faire pour moi

### make:form

Grâce à `bin/console`, je peux demander à symfony de créer un formulaire pour moi.

Attention il s'agit d'une `classe` formulaire ! donc pas d'un formulaire html direct !

En revanche cette classe possède des méthodes qui lui permettent de générer ce html ! youpi !

#### MonEntitéType

Le nom de la classe recommandé est "EntitéType" (si mon entité est Article, alors `ArticleType`). C'est fait de telle sorte que "théoriquement parlant", on un nouveau `type` d'`input` qui serait le type `article`.

Dans les faits, ce sera juste un assemblage de plusieurs inputs : ceux dont Article a besoin.

#### Entité associée

`make:form` nous demande l'entité associée : il s'agit de celle que je veux remplir avec le formulaire que je crée.

Si je veux remplir un User, mon formulaire sera bien différent de si je veux remplir un Article.

### Utilisation

Une fois créé le nouveau `ArticleType`, je vois qu'il possède les inputs adaptés à l'entité Article :

```php
public function buildForm(...): void
    {
        $builder
            ->add('title') // l'article possède un $title
            ->add('content') // etc.
            ->add('image')
            ->add('date')
        ;
    }
```

### Intégration dans le Controller

Utiliser `$this->createForm(ArticleType::class)` fourni par le `AbstractController` de symfony.

Cela génère un objet Form, qui nous permettra de générer la vue etc.

Je l'appelle dans le template :

```php
$this->render('template.html.twig', [
    'formView' => $form->createView(),
])
```

et dans le fichier twig :

```twig
{{ form (formView)}}

ou

{{ form_start(formView)}}

{{ form_widget(formView)}}

<button type="submit">Ajouter</button>

{{ form_end(formView)}}
```

### Injection de dépendances

Une fois le formulaire posté, la méthode est de nouveau appelée, et le formulaire réaffiché.

Mais pour savoir ce qu'il contenait on a besoin de lire la Request HTTP, et mettre à jour $form.

Pour ce faire, on va _demander_ à Symfony de nous donner des éléments dont on a besoin.

Comme C'est Symfony (son routeur) qui exécute les méthodes du Controller, il est en mesure (car il est très intelligent, c'est un mécanisme compliqué) d'appeler les méthodes avec des arguments spécifiques si ils sont demandés.

Donc si je définis

```php
public function create(Request $request)
{

}
```

Symfony sera capable d'appeler `create` en lui donnant l'objet de type `Request`qu'il connaît (càd la requete http de l'utilisateur).

Ce n'est pas magique, et c'est très puissant.

### Intégrer la Request dans le $form

```php
$form->handleRequest($request);
```

`$form` est maintenant à jour, avec les infos récupérées du $\_POST contenu dans la Request.

Je peux donc tester les données et l'état du formulaire :

```php
if ($form->isSubmitted() && $form->isValid())
{
    // Traitement à jouer si le formulaire est soumis depuis le front et valide.
}
```

### Si le formulaire est soumis et il est valide

Alors je vais créer une nouvelle Entité contenant les informations du formulaire.

#### Marche à suivre

```php
$article = new Article();
// Le deuxième paramètre de la méthode `createForm` prend
// un objet qui peut stocker les valeurs du formulaire.
// (cf : `data_class` dans ArticleType).
// Dans notre cas, la data class est une classe "entité", donc
// une fois remplie on pourra la sauvegarder en base.
// En résumé j'ai :
//                     Form              ORM
// données formulaires <-> class Article <-> table article
$form = $this->createForm(ArticleType::class, $article);
```

Comme le `handleRequest` remplit le Form, le Form remplit $article.

Il suffit ensuite de sauvegarder l'article. (on demande au Manager de Doctrine de le faire ! Et pour avoir le manager, on le demande à Symfony avec de l'Injection de Dépendance)

```php
function create(...., ObjectManager $manager)
{
    ...
    $manager->persist($article);
    $manager->flush();
}
```

### Update d'un article

C'est la même chose que la création.

La seule différence c'est que le formulaire doit être prérempli avec les données existantes, récupérées depuis le paramètre `id` de la route.

Donc on ajoute juste une étape supplémentaire, qui est une requête à la base grâce au Repository (qu'on obtient également par Injection de Dépendance).

### @ParamConverter

Symfony est même capable de nous injecter l'objet Article directement, si on type correctement le paramètre.

Le service symfony qui s'en charge s'appelle le ParamConverter
