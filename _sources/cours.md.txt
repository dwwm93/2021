## Lundi 2021-10-18

### Présentation des étudiants

Tour de table et d'où ils viennent.

### Présentation de la formation

On a parlé du REAC : qu'allons nous voir en formation ? Qu'est-ce que c'est, une application Web/Web mobile ?

* une application exécutée par un navigateur
* une séparation entre la partie "front" (navigateur) aussi appelée "client"
* et la partie "backend" (données et traitements, sur des machines distantes) aussi appelée "serveur".

### Langages, techno et méthodes

Pour certains il était important de savoir ce qu'ils sauront faire, pour pouvoir chercher un stage au plus vite.

Donc on a fait la liste des compétences qu'ils auront à terme :

* front : html5, css3, javascript, bootstrap
* back : php, symfony, twig, SQL, MySQL, Markdown
* divers : git, MVC, Merise (MCD), méthode agile, ligne de commande, vscode ...

### Présentation de l'environnement de travail

=> les différents types de sociétés (industrie, service, SSII, freelance ...) et leurs avantages / inconvénients.

### Exemple de code

On a codé rapidement ensemble une simple page pour faire un airbnb. En 20min avec bootstrap pour voir que c'est assez simple / rapide, si on réfléchit en amont.

### Prise en main

Présentation du répertoire personnel : `C:\Users\greta.HP05xxx.000\`, arborescence des répertoires sur windows et macos.

> création du répertoire "Code/" pour stocker correctement son code dans son dossier personnel.

Puis on a commencé les balises html, et ce qu'est un langage de balisage : apporter du sens (du contexte) à un texte brut. Ce sens est interprété par le navigateur qui ensuite va faire un affichage différencié entre les éléments.

> présentation vscode, notamment Emmet (avec "lorem" etc. pour l'aide au développement) qui est intégré à vscode
## Mardi 2021-10-19

Points Html

### Chemins relatifs

=> notamment pour les attributs "href" ou "src" des balises `<a>`, `<img>` ... 

L'idée c'est de penser à un arbre généalogique :

> la règle c'est que je n'ai accès qu'à mes frères et soeurs !

```
grands parents 
   | -- parents 
       | -- rihanna
       | -- marlène 

```

Ici Marlène est la soeur Rihanna : au même niveau.

=> "chemin relatif" de Marlène par rapport à Rihanna c'est "Marlène".

```
grands parents 
   | -- parents 
       | -- rihanna
       | -- diallo
           | -- marlène 

```

Marlène devient la tante de Rihanna, donc le chemin relatif c'est "diallo > marlène".

Pour les répertoires c'est aussi une organisation "généalogique" (une **arborescence**).

> exemple pour la nièce en version "répertoire" : `diallo/marlène` ou `video/gangnam_style.mp4`.

Subtilité pour accéder au parents :

je ne peux pas écrire `parents/marlène` => sinon mes parents sont mes frères et soeurs... 

Un répertoire peut avoir combien de parents ?? **1 seul** => on utilise l'alias `..`. Cela nous positionne au niveau supérieur, comme un frère/soeur de nos parents.

> exemple pour accéder aux grands parents : `../../grandsparents`.

### Balises auto-fermantes

Elles n'ont pas besoin d'encadrer du texte.

**Pour autant il faut les fermer quand même !!!**

Avec un `/` avant le `>`.

ex: `<img src="" />`

### Balises sémantiques HTML5

Sur le [site développeur Mozilla](https://developer.mozilla.org/fr/docs/Web/HTML/Element#content_sectioning) on trouve la liste des balises html5 qui permettent de découper son contenu de manière intelligible.

> on ajoute de l'information à la structure de notre page !
>
> On est en mesure de dire "telle partie" concerne tel genre de choses (la navigation, le footer ...), telle partie forme un tout ("`<article>`") etc.

On peut utiliser des `<div>` à la place, mais on perd de l'information. **OR l'informatique c'est la manipulation de l'information** donc perdre de l'info c'est *MAL* !

Autant que possible on essaie donc de découper sa page d'une manière similaire à :

```html
<body>
    <nav>Navbar</nav>
    <header>Entête</header>
    <main>
        <section>
            <article>
                <section>

                </section>
                <section>

                </section>
                 <section>

                 </section>
                 <aside>

                 </aside>
           </article>
           ...
        </section>
        <section>
            ...
        </section>
    </main>
    <footer>Pied de page</footer>
</body>
```

En adaptant les sections/articles/aside à son contenu, _bien évidemment_.

### Accessibilité

#### Définition

> L'accessibilité est la mise à disposition de vos sites web au plus grand nombre. On pense souvent que cela s'adresse aux personnes ayant un handicap, mais cela concerne également d'autres groupes comme ceux utilisant des appareils mobiles ou ceux qui ont des connexions internet de faible débit.
> 
> On peut aussi dire que l'accessibilité c'est traiter tout le monde de la même manière, et donner les mêmes opportunités à tous, peu importe leur handicaps ou les circonstances. De la même manière qu'il est injuste d'empêcher une personne d'accéder à un bâtiment parce qu'elle est en fauteuil roulant (les lieux publics sont souvent équipés de rampes d'accès ou d'ascenseur de nos jours), il est également injuste d'empêcher une personne d'accéder à un site web parce qu'elle a des troubles de la vue, ou qu'elle utilise un téléphone portable. Nous sommes tous différents, mais nous sommes aussi tous humains, ce qui nous donne les mêmes droits.
> 
> Rendre son site accessible est la bonne chose à faire, mais c'est aussi demandé par la loi de certains pays, et cela peut vous ouvrir des marchés conséquents pour qui vos services et vos produits ne seraient sinon pas accessibles.
> 
> L'accessibilité et les bonnes pratiques qu'elle implique peuvent bénéficier à tous :
>
> * Le HTML sémantique (qui rend votre site plus accessible) rend également votre site plus optimisé pour les moteurs de recherche, ce qui améliore le référencement de votre site.
> * Se préoccuper de l'accessibilité c'est faire preuve d'éthique et de morale, ce qui améliore votre image publique.
> * Des bonnes pratiques améliorent l'accessibilité rendent également votre site plus facilement utilisable par différents groupes comme les utilisateurs de téléphones portables, les personnes ayant un faible débit, etc. En fait, tout le monde peut tirer un bénéfice de ces améliorations.
> * A-t-on mentionné que c'est la loi dans certaines régions ?

[source](https://developer.mozilla.org/fr/docs/Learn/Accessibility/What_is_accessibility)

Ceci est un argument pour utiliser correctement les balises sémantiques vues au dessus.

### Balises textuelles classiques

* ul/li : liste non ordonnée
* ol/li : liste ordonnée
* p : paragraphe
* ~b~ : ne pas utiliser, c'est de la mise en forme !
* ~br~ : ne surtout pas utiliser !! et surtout pas sous sa forme "non fermée" : `<br>` :dead: Au pire utiliser `<br />`. Mais au mieux il faut s'en passer
* strong
* em
* span
* div

On se réserve `<table>` et `<form>` pour la prochaine fois.

Pour l'instant il faut bosser sur un site perso, sur un sujet quelconque, à condition de bien respecter la structure sémantique du site.
## Lundi 2021-10-25

Révision des balises déjà vues.

### Différence GET/POST dans les formulaires

Lorsque l'on valide un formulaire, on envoie une requête contenant les données du formulaire à l'adresse remplie dans l'attribut `action`.

Tout ceci passe par internet pour atteindre sa destination !

![cables sous marins](https://www.eurafibre.fr/wp-content/uploads/2018/12/carte_cables_sous-marins__reseau_internet_monde.jpg)

Pour ce faire, l'information est en fait découpée en 2 : l'adresse et le contenu.

> C'est la même idée que l'adresse sur l'enveloppe et la lettre (=contenu) à l'intérieur.

On identifie donc 2 méthodes "HTTP" pour faire cet envoi d'information :

* GET = on envoie adresse + données dans l'adresse (un peu comme une carte postale)
* POST = on sépare bien les données et l'adresse (ex: enveloppe standard)

Ainsi on utilise _plutôt_ le GET pour récupérer des informations. (et les précisions dans l'adresse permettent de donner des instructions, ex : sonner chez Mme Bidule) Tandis qu'on utilise _plutôt_ le POST pour envoyer des informations (qui sont cachées aux yeux du "facteur").

### Commentaires

```html
<!-- Ici ce n'est pas affiché -->
```

### Attribut : 'style'

On peut modifier le style d'un élément HTML (càd une balise) en utilisant l'attribut `style`.

ex: 
```html
<span style="color:blue">bonjour</span>
```

### Introduction à flexbox

"flexbox" permet de positionner des blocks les uns par rapport aux autres (plutôt que de les laisser juste les uns sous les autres).

[ressource indispensable](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)

Lorsqu'un élément devient "flex" (en utilisant: `display=flex` dans le style), alors **il est en mesure de décider du positionnement de ses enfants, et _uniquement_ de ses enfants**.

Par exemple, il peut décider de mettre ses enfants en ligne au lieu de colonne, et de les séparer par des espaces s'il y a des espaces en trop.

```html
<nav>
    <ul style="display:flex;justify-content:space-evenly;">
        <li>lien 1</li>
        <li>lien 2</li>
        <li>lien 3</li>
    </ul>
</nav>
```

On peut également faire afficher les enfants en colonne (`flex-direction:column;`), ou les positionner les uns par rapport aux autres sur l'axe "perpendiculaire" à la flex-direction.

Pour s'entraîner on a positionné les blocs de notre page "perso", et on a déroulé une partie du site css-tricks.

exercice:

Créer 2 articles, centrer l'intérieur de chaque article horizontalement (donc perpendiculairement à l'axe principal vertical), puis positionner les 2 composants l'un par rapport à l'autre pour que leurs centres soient alignés sur l'axe horizontal.

> TODO dessiner le schéma
## Mardi 2021-11-02

### Exercice mise en page CV

Refaire son cv avec une barre à gauche qui contient
la photo, le nom/prénom, les compétences et les langues.

Et à droite les expériences, les formations et le formulaire de contact.

> but : utiliser flexbox + margin / padding, align-items pour centrer sur l'axe perpendiculaire à la flex-direction etc.

#### Point sur les enfants flexbox qui désobéissent

`align-self: end`, sur l'enfant, écrase `align-items: center;` du parent.

### UX / UI

Premier aperçu de la différence entre :

* l'expérience utilisateur : sa facilité de compréhension de l'application, la rapidité avec laquelle il prend en main le site, son ressenti ...
* et l'interface utilisateur : les éléments de style qui lui plaisent, qui facilitent la lecture éventuelle, qui donnent vie à la page etc.

Petite [vidéo explicative](https://www.youtube.com/watch?v=Ovj4hFxko7c)

### Responsive

Présentation des `@media-queries`.

Référence sur [developper mozilla](https://developer.mozilla.org/fr/docs/Web/CSS/Media_Queries/Using_media_queries).

Exemple 

```css
.selecteur {
    propriété: valeur1;
    autre_prop: autre_valeur;
}

@media screen and (max-width: 376px) {
    .selecteur {
        propriété: valeur2; /** écrase la valeur 1 */
        /** mais se cumule avec autre_prop de valeur autre_valeur */
    }
}
```

> Exercice: rendre son CV responsive, en l'affichant sur une seule colonne en mode "smartphone".
>
> Corrigé en une ligne: passer le parent des 2 blocs situés côte à côte en style : `flex-direction: column;`. *Et voilà !*

On peut aussi afficher son numéro de téléphone en mode smartphone et le cacher en mode tablette ou pc. (=> `display: none;`);
## Mardi 2021-11-09

### Révision css

### Découverte nouvelles propriétés css

#### Modificateurs css : `:nth-child(An+B)`

Permet de ne sélectionner un élement que s'il est le "n-ième" enfant de son parent.

Le test est valide si le numéro "x" de l'élément est bien égal à un moment à la formule "An+B" (avec n qui va de 0 au max des enfants).

exemple :

```css
/** Le <li> ne sera rouge que s'il est le 3ème enfant de son parent */
li:nth-child(3) {
    background-color: red;
}
/** le <li> sera gris uniquement s'il est impair : car si n vaut 0 alors on grise le <li> numéro 2*0+1 (donc 1), quand n vaut 1 alors on grise le <li> numéro 3, puis pour n vaut 2 on grise le 5 etc. */ 
li:nth-child(2n+1) {
    background-color: gray;
}
```

Il existe aussi le modificateur qui compte à partir de la fin : `:nth-last-child(An+B)`.

Ou un autre qui prend le dernier : `:last-child` etc.

#### Modificateurs css : `::after`

Permet d'écrire un contenu après l'élément selectionné par le selecteur css.

exemple:

```css
/** met une virgule à la fin de tous les <li> */
li::after {
    content: ', ';
}
```

### Initiation à git

Présentation de git et de son intérêt (pourquoi il existe !).

Utilisation du site [learn git branching](learngitbranching.js.org) pour découvrir les premières commandes et les branches.

* git commit
* git branch "branch1"
* git checkout "branch1"
* git merge "branch1"

### Initialisation d'un repo git pour son code greta

1. installer git ([gitforwindows.com](https://gitforwindows.com)), ou `brew install git` ou autre
2. ouvrir son workspace vscode pour être dans le bon répertoire
3. `git init .` dans un terminal vscode
4. `git add nom_du_fichier_ou_du_repertoire` pour indiquer les fichiers que l'on veut "sauvegarder"
5. `git commit` => attention il faut rentrer un message sinon il refuse le commit, et c'est casse pied ! donc on préfèrera `git commit -m`.
## Mardi 2021-11-16

### Git + Github

* révisions git + commit des codes effectués jusqu'à présent
* explications github : site qui permet de centraliser les repositories et les branches de git
* création de compte github
* paramétrage vscode (attention aux pcs windows pas à jour, il faut utiliser la clé ssh dans ce cas là)
* push du code vers github dans un repo privé

### Reprise de bootstrap

#### Composants et layouts

* container
* fonctionnement de la grid
* progressbar
## Mercredi 2021-11-17

On commite bien tout le code effectué hier !

Puis on commence à travailler.

### Bootstrap

Poursuite de la découverte de bootstrap :

* carousel
* card
* bouton group
* tooltip
* **modal** !

### Fontawesome

Utilisation du css / js pour afficher des pictogrammes

### Exercice

Créer une deuxième Modal associée au bouton login qui contient le formulaire de login.
## Mardi 2021/11/23

### Révisions javascript

* déclaration de variables : `var, let et const`: différences (modifiable, redéclarable)
* assignation des valeurs
* prompt / alert / document.querySelector
* fonctionnement du html dans le navigateur (version en mémoire que l'on peut modifier, sans toucher à index.html)
* get/set 

### Découverte des boucles

Syntaxe js des boucles :

```js
for (let i = 0;i<10;i++){
    // traitement
}
```

Exercice : demander un nombre à l'utilisateur et énumerer tous les nombres de 0 au chiffre demandé dans une liste html.
## Mercredi 2021/11/24

### Boucles + tableaux

On continue sur les boucles + découverte des tableaux.

En particulier on essaie de faire une boucle pour parcourir tous les éléments d'un tableau et les afficher à l'écran.

Exercice: afficher la liste des élèves, à partir du tableau qui contient les prénoms.

### Fonctions

Il s'agit d'un concept.

Une fonction est un traitement qui prend des "arguments" en entrée, et qui renvoie le résultat du traitement effectué sur les arguments donnés.

Fonctionnement "boîte noire" : la fonction ne doit pas changer au fil du temps ! (cf : `document.querySelector('selecteurCss')`).

=> **Même résultat pour même argument en entrée !**

```sh
             .__________.
entrée ----> | fonction | -----> sortie
             |__________|
```

### 2 étapes

#### 1. Définition / Déclaration

Syntaxe en javascript:

```js
function nomDeMaFonction(argument1, argument2){
    /** Ici traitement en javascript ! */
    // Par exemple : 
    let somme = argument1 + argument2
    return somme; // ce que la fonction "renvoie" en sortie
}
```

cf en mathématique : `f(x)=x+1`.

NB: argument1 et argument2 sont des variables, qui seront déclarées au moment de l'exécution de la fonction, et dans lesquelles on mettra les valeurs données en argument.

#### 2. Execution

ou : comment utiliser la fonction ?

```js
let valeur1 = "valeur1";
let valeur2 = "valeur2";
const resultat = nomDeMaFonction(valeur1, valeur2);
// Questions :
// resultat contient quoi ?
// resultat -> "valeur1" + "valeur2" -> "valeur1valeur2"
```

#### Exercice

Faire une fonction qui calcule le carré du chiffre donné par l'utilisateur via un prompt.
## Mardi 2021-11-30

### Fonctions

Révisions fonctions:

* ne pas utiliser de variable extérieure à la fonction
* si besoin de passer des informations, les passer par le biais des paramètres de la fonction.

=> Imaginer le déroulement comme des pièces de puzzle qui s'imbriquent les unes dans les autres, où les sorties de l'une sont les entrées de l'autre.

On reprend exercice pour appeler des fonctions dans des fonctions.

#### Exercice

Décomposer un traitement en multiples fonctions.

A partir d'un tableau qui contient les élèves (sous forme d'un tableau également), écrire les fonctions qui permettent leur affichage sous forme de cards.

Commencer par écrire sa démarche sur papier, puis déterminer les fonctions (squelette) puis les coder.

Une fois avancés, un peu d'aide :

```js
const studentsDWWM = [
    ["léponge", "bob", "5", "https://i.pravatar.cc/100?u=léponge"],
    ["émorti", "rik", "99", "https://www.stevensegallery.com/100/100"],
];

/**
 * 
 * @param {Array} students Tableau de tableaux [ [nom, prenom, age, avatar], ]
 * @returns {string} Le html de toutes les cards de tous les étudiants
 */
function genCards(students) {}

/**
 * 
 * @param {Array} student [nom, prenom, age, avatar]
 * @returns {string} La card html pour un étudiant
 */
function genCard(student) {}

function getStudentInfos(student) {}

function genHtmlCard(header, content, footer) {}

// Appel de la fonction et écriture dans le HTML
document.querySelector("div#students").innerHTML = genCards(studentsDWWM);

```
## Mercredi 2021-12-08

On reprend l'exercice sur les cards pour les fonctions.

### Révision complète sur les fonctions

Ce n'était pas bien compris. On reprend avec l'exemple des processus/instructions dans l'administration :

Comment se passe, quelles sont les étapes, de la création d'une CNI.

De quoi le fonctionnaire a besoin en entrée de son traitement ? (une photo d'identité, un justificatif de domicile ...)

Est-ce qu'on peut décomposer son traitement en sous-traitement ?

=> cela pourrait donner plusieurs fonctions et sous fonctions.

### Reprise de l'exercice

Bien différencier le "return" d'une fonction, avec son traitement qui peut éventuellement "écrire dans le HTML".
## Jeudi 2021-12-09

Correction de l'exercice sur les Cards/fonctions.

Beaucoup de difficultés dans le groupe. Se mettent à mélanger les concepts dès qu'il y en a un qu'ils ne comprennent pas.

### Exercice simple fonction

Créer un formulaire de 2 champs : montant et durée.

Ajouter un bouton qui déclenche la multiplication du montant et de la durée, pour connaître son salaire au bout de X mois. Et l'afficher en dessous.

Quand terminé, ajouter un select pour choisir la monnaie, et l'ajouter à l'affichage.

Puis calculer la TVA et l'afficher entre parenthèses à côté.
## Mardi 2021-12-14

### Tableaux associatifs

Il s'agit d'un tableau donc les index ne sont pas numériques (comme on a eu l'habitude jusqu'à présent) mais "string".

Pour récupérer un élément dans un tableau normal, je dois indiquer sa position dans le tableau. (ex: `tableau[1]`).

Dans un tableau associatif, je le récupère par sa clé (ex: `tableau["nom"]`).

#### 2 syntaxes de déclaration / écriture

1. Les clés sont des strings, et on l'indique explicitement :

    ```js
    const eleve = {
        "nom": "SON_NOM",
        "prenom": "SON_PRENOM",
        "age": 25,
    };
    ```

2. Les clés sont toujours des strings mais c'est implicite :

    ```js
    const eleves = {
        nom: "SON_NOM",
        prenom: "SON_PRENOM",
        age: 25,
    };
    ```

#### 2 syntaxes d'utilisation / lecture

1. Explicite, sur le même type que pour les tableaux à indices numériques :

    ```js
    const nom = eleve["nom"];
    ```

2. Implicite, l'indice est collé avec ".", sans préciser qu'il s'agit d'une string

    ```js
    const nom = eleve.nom;
    ```

#### Typage et commentaires

```js
/**
 * @param {{nom: string, prenom: string}} eleve - Elève à traiter
 */
function traitement(eleve){}
```

### Exercice

Afficher la liste des élèves dans une table HTML.

```js
const studentsDWWM = [
    {"nom": "léponge","prenom": "bob","age" : "5","avatar": "https://i.pravatar.cc/100?u=léponge"},
    {"nom": "létoiledemer","prenom": "patrick","age" : "25","avatar": "https://i.pravatar.cc/100?u=létoiledemer"},
    {"nom": "z","prenom": "dragonball","age" : "105","avatar": "https://i.pravatar.cc/100?u=z"},
    {"nom": "han","prenom": "sango","age" : "12","avatar": "https://i.pravatar.cc/100?u=han"},
    {"nom": "seagall","prenom": "steven","age" : "?","avatar": "https://www.stevensegallery.com/100/100"},
    {"nom": "émorti","prenom": "rik","age" : "99","avatar": "https://www.stevensegallery.com/100/100"},
];
```

=> [exercice et corrigé](https://github.com/dwwm93/2021/tree/main/2021-12-14_tableaux_associatifs)

### TP Banque

#### Consignes

1. créer les tableaux JS par compte, qui contiennent les tableaux associatifs pour chaque ligne de compte ,
2. afficher en HTML chaque compte dans un tableau html distinct
3. calculer et afficher le solde du compte (le total du montant des opérations)
exemple de tableau associatif pour une ligne de compte :

```js
{
   operation: "Kebab Royal",
   montant: 9.00,
   date: "2021/12/14",
}
```

=> [exercice et corrigé](https://github.com/dwwm93/2021/tree/main/2021-12-09%20tp%20banque)
## Lundi 2021/12/20

1. Exercice site de vente en ligne "Esat", à continuer
2. Correction site TP Banque "Marc"

Beaucoup de points revus ou à revoir sur ces exercices "généralistes".

### Précisions sur les @typedef

```js
/**
 * @typedef {xxx} NomType - description
 */
```
